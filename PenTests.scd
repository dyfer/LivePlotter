(
w = Window.new(nil, 800@600).front;
w.view.background_(Color.clear);
w.drawFunc = {
	    Pen.width = 1;
    // set the Color
    Pen.strokeColor = Color.black;
    Pen.moveTo(19@100);

    Pen.lineTo(20.0@200);
	Pen.lineTo(70@150);
	// Pen.width = 4;
    Pen.lineTo(120@100);
    Pen.lineTo(125@200);

    Pen.lineTo(125@50);
    Pen.lineTo(228@200);
	//     Pen.lineTo(200@100);

    Pen.stroke
};
w.refresh;
)

(
w = Window.new(nil, 800@600).front;
w.view.background_(Color.clear);
w.drawFunc = {
	    Pen.width = 1;
    // set the Color
    Pen.strokeColor = Color.black;
    Pen.moveTo(20@100);
    Pen.lineTo(600@101);
    Pen.moveTo(20@104);
    Pen.lineTo(600@104.5);

    Pen.stroke
};
w.refresh;
)

//stethoscope view

s.boot;
(
w = Window.new.front;
w.layout = HLayout();
v = ScopeView(w);
v.bounds;
b = ScopeBuffer.alloc(s);
v.server = s;
// v.canFocus = true;
v.bufnum = b.bufnum;
v.background = Color.white;
v.waveColors = [Color.rand];
v.fill = false;
v.start;
)
v.background = Color.white
v.waveColors = [Color.rand];
v.dump;
v.stop;
v.start;
// v.server = s;
// scopeView.canFocus = true;
// scopeView.bufnum = synth.bufferIndex;
// scopeView.start;
// };
(
d =SynthDef(\scopeTest, { arg bufIndex, bufSize, cycle, buf;
	// var z = Array();
	// bus.do { |b| z = z ++ b.ar };
	// ScopeOut2.ar(K2A.ar(MouseX.kr(-1, 1)), bufIndex, bufSize, cycle);
	// ScopeOut2.ar(LFNoise0.ar(500, 1), bufIndex, bufSize, cycle);
	// ScopeOut2.ar(K2A.ar(MouseX.kr(-1, 1)), bufIndex, bufSize, cycle);
	// ScopeOut2.kr(MouseX.kr(-1, 1), bufIndex, 500, 500);
	// ScopeOut2.kr(MouseX.kr(-1, 1), bufIndex, bufSize, cycle);
	ScopeOut2.kr(BufRd.kr(1, buf, Phasor.kr(0, 1, 0, BufFrames.kr(buf))), bufIndex, BufFrames.kr(buf), BufFrames.kr(buf));
	// ScopeOut2.ar(BufRd.ar(1, buf, Phasor.ar(0, 1, 0, BufFrames.kr(buf))), bufIndex, bufSize, cycle);
}).add;
)

c.free; c = Buffer.alloc(s, 128, 1);

x = Synth(\scopeTest, [\bufIndex, b.bufnum, \bufSize, 500, \cycle, 500]);
x = Synth(\scopeTest, [\bufIndex, b.bufnum, \bufSize, 512, \cycle, 64]);
x = Synth(\scopeTest, [\bufIndex, b.bufnum, \bufSize, 1024, \cycle, 1024, \buf, c]);
x = Synth(\scopeTest, [\bufIndex, b.bufnum, \bufSize, c.numFrames, \cycle, c.numFrames, \buf, c]);
x.free;

SynthDef(\bufWr, {arg buf; BufWr.kr(MouseY.kr(-1, 1), buf, MouseX.kr(0, BufFrames.kr(buf)))}).add;
y = Synth(\bufWr, [\buf, c]);

x.free
s.plotTree

(
w = Window.new.front;
w.layout = HLayout();
v = ScopeView(w);
v.bounds;
b = Buffer.alloc(s, 1024);
v.server = s;
// v.canFocus = true;
v.bufnum = b.bufnum;
v.background = Color.white;
v.waveColors = [Color.rand];
v.fill = false;
v.start;
)



s.boot;
(
w = Window.new.front;
w.layout = HLayout();
v = ScopeView(w);
v.bounds;
b = ScopeBuffer.alloc(s);
v.server = s;
// v.canFocus = true;
v.bufnum = b.bufnum;
v.background = Color.white;
v.waveColors = [Color.rand];
v.fill = false;
v.start;
)
v.background = Color.white
v.waveColors = [Color.rand];
v.dump;
v.stop;
v.start;
// v.server = s;
// scopeView.canFocus = true;
// scopeView.bufnum = synth.bufferIndex;
// scopeView.start;
// };
(
SynthDef(\scopeTest, { arg scopeBuf = 0, memoryBuf = 0, slidingBuf = 0, inbus = 0, rate = 0.1;
	var inSig, memPhasor, slidingSig, slidingPhasor;
	inSig = In.kr(inbus, 1);
	memPhasor = Phasor.kr(0, rate, 0, BufFrames.kr(memoryBuf));
	BufWr.kr(inSig, memoryBuf, memPhasor);
	memPhasor.poll;
	slidingPhasor = Phasor.ar(0, 1, 0, BufFrames.kr(memoryBuf));
	// slidingPhasor.poll;
	slidingSig = BufRd.ar(1, memoryBuf, slidingPhasor);
	BufWr.ar(slidingSig, slidingBuf, slidingPhasor - K2A.ar(memPhasor));
		// BufRd.kr(1, memoryBuf, (Phasor.kr(0, 1, 0, BufFrames.kr(memoryBuf)) + memPhasor) % BufFrames.kr(memoryBuf)),
	// ScopeOut2.kr(BufRd.kr(1, slidingBuf, Phasor.kr(0, 1, 0, BufFrames.kr(memoryBuf))), scopeBuf, BufFrames.kr(memoryBuf), BufFrames.kr(memoryBuf));
	ScopeOut2.ar(BufRd.ar(1, slidingBuf, Phasor.ar(0, 1, 0, BufFrames.kr(memoryBuf))), scopeBuf, BufFrames.kr(memoryBuf), BufFrames.kr(memoryBuf)); //ar
}).add;
)

c.free; c = Buffer.alloc(s, 128, 1);
d.free; d = Buffer.alloc(s, 128, 1);
c.free; c = Buffer.alloc(s, 1024, 1);
d.free; d = Buffer.alloc(s, 1024, 1);
f=Bus.control(s, 1);
f.set(0.5)
c.numFrames

x = Synth(\scopeTest, [\scopeBuf, b.bufnum, \memoryBuf, c.bufnum, \slidingBuf, d.bufnum, \inbus, f, \rate, 0.01]);
x.set(\rate, 0.2)
x.free;

SynthDef(\bufWr, {arg buf; BufWr.kr(MouseY.kr(-1, 1), buf, MouseX.kr(0, BufFrames.kr(buf)))}).add;
y = Synth(\bufWr, [\buf, c]);
SynthDef(\bufWr, {arg bus; Out.kr(bus, MouseY.kr(-1, 1))}).add;
y = Synth(\bufWr, [\bus, f.index]);
y.free;

//scope tests in a separate document!

//see "http://sc-users.bham.ac.narkive.com/yuBtzweF/qscope2" for plotter implementation with Pen